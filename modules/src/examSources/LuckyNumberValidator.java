package src.examSources;
import src.CommonHelperMethods;

import java.util.*;
import java.util.stream.Stream;

public class LuckyNumberValidator
{
/*
Background: We define a Lucky Number as a positive integer N such that the sequence
generated by summing the squares of each digit converges to 1.

Example: 7 ->  7^2 = 49 ->  4^2 + 9^2 = 97 -> 9^2 + 7^2 = 130 -> 1^2 + 3^2 + 0^2 = 10 -> 1^2 + 0^2 = 1 -> 1^2 = ... = 1.

Challenge:
(1) Implement an algorithm to determine whether or not an integer is a Lucky Number.
(2) Modify the class as needed, making any improvements in readability, style, performance, etc as needed.

Constraints:
Don't modify anything above line

 */
/*
	private void testRun()
	{
		Stream.of(19, 1000)
				.map(this::isLucky)
				.forEach(System.out::println);
	}
	*/ //I modified it below. Turned it into static.
	/****Don't modify anything above this line ****/

	public static List<Boolean> validateStreamOfIntegersAsLucky(Integer... values)
	{
		List<Boolean> returnValues = new ArrayList<>();
		Stream.of(values)
				.map(LuckyNumberValidator::isLucky)
				.forEach(returnValues::add);

		return returnValues;
	}

	public static boolean isLucky(int n)
	{
		List<Integer> previousNumbers = new ArrayList<>();

		return isLuckyHelper(n, previousNumbers);
	}

	protected static boolean isLuckyHelper(int n, List<Integer> previousNumbers)
	{
		if(n == 1)
		{
			return true;
		}
		if(previousNumbers.contains(n))
		{
			//System.out.println("Entered a loop. Stopping and returning false.");
			return false;
		}

		previousNumbers.add(n);
		List<Integer> digitsSeparated = CommonHelperMethods.separateDigitsIntoList(n);
		//System.out.println(digitsSeparated.toString());

		//returnSumOfSquares
		Integer sumOfSquares = CommonHelperMethods.summationOfSquares(digitsSeparated);
		//System.out.println(sumOfSquares);
		//evalIsSumEqualToOne
		return isLuckyHelper(sumOfSquares, previousNumbers);

	}
}
